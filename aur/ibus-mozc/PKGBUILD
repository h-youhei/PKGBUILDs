# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

_mozcrev=afb03ddfe72dde4cf2409863a3bfea160f7a66d8

pkgname=ibus-mozc
pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)"
pkgver=2.23.2815.102
pkgrel=1
arch=('i686' 'x86_64')
url="https://github.com/google/mozc"
license=('BSD' 'custom')
depends=('qt5-base' 'ibus>=1.4.1' 'zinnia')
makedepends=('pkg-config' 'python2' 'git' 'ninja' 'clang' 'qt5-base')
replaces=('mozc-server' 'mozc-utils-gui')
conflicts=('mozc-server' 'mozc-utils-gui')
optdepends=('tegaki-models-zinnia-japanese: hand-writing recognition support')
source=(
  mozc::git+https://github.com/google/mozc.git#commit=${_mozcrev}
  'activate_on_launch.patch'
)
sha1sums=(
  'SKIP'
  'SKIP'
)


pkgver() {
  . "${srcdir}/mozc/src/data/version/mozc_version_template.bzl"
  printf "%s.%s.%s.%s" $MAJOR $MINOR $BUILD $REVISION
}


prepare() {
  ln -sf `which python2` "${srcdir}/python"

  cd "${srcdir}/mozc"

  git submodule update --init --recursive

  patch -u src/unix/ibus/property_handler.cc < "${srcdir}/activate_on_launch.patch"
}


build() {
  PATH="${srcdir}:${PATH}"

  cd "${srcdir}/mozc/src"

  msg "Starting make..."

  unset CC CC_host CC_target CXX CXX_host CXX_target LINK AR AR_host AR_target \
        NM NM_host NM_target READELF READELF_host READELF_target
  GYP_DEFINES="document_dir=/usr/share/licenses/mozc" \
    python2 build_mozc.py gyp --target_platform=Linux

  python2 build_mozc.py build -c Release server/server.gyp:mozc_server gui/gui.gyp:mozc_tool \
    unix/ibus/ibus.gyp:ibus_mozc renderer/renderer.gyp:mozc_renderer

  sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' \
      out_linux/Release/gen/unix/ibus/mozc.xml
}

package() {
  cd "${srcdir}/mozc"
  install -d "${pkgdir}/usr/share/licenses/mozc/"
  install -m 644 LICENSE src/data/installer/*.html "${pkgdir}/usr/share/licenses/mozc/"

  cd "${srcdir}/mozc/src"
  install -D -m 755 out_linux/Release/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/Release/mozc_tool   "${pkgdir}/usr/lib/mozc/mozc_tool"

  install -D -m 755 out_linux/Release/ibus_mozc       "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/Release/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"

  install -D -m 755 out_linux/Release/mozc_renderer "${pkgdir}/usr/lib/mozc/mozc_renderer"
}
